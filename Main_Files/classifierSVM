import balancear
from sklearn.svm import SVC
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.pipeline import Pipeline

def writeResult(score, allBalanced, balancedFile, notBalancedFile):
    if (allBalanced == True):
        balancedFile.write(str(score) + "\n")
    else:
        notBalancedFile.write(str(score) + "\n")


balancedFile = open("ResultadosBalanceadosSVM.txt", "a")
notBalancedFile = open("ResultadosDesbalanceadosSVM.txt", "a")
totalScore = 0
i = 0
boole = False
allBalanced = False
while (i < 10):
    while (boole == False):
        resp = input("Deseja dados balanceados? y/n \n")
        if (resp == "y"):
            # pego todos os dados de forma balanceada 50%-50%
            dados = balancear.get_balanced()
            boole = True
            allBalanced = True
        elif (resp == "n"):
            # pega os dados desbalanceados
            dados = balancear.shuffle()
            boole = True
        else:
            boole = False

    coment=dados["Comentário"]
    aval = dados["Avaliação"]

    #dados de treino
    x_treino = coment[:int(len(coment) *.8) ]
    y_treino = aval[:int(len(aval) *.8) ]

    #dados de validação
    x_test = coment[int(len(coment) *.8): ]
    y_test = aval[int(len(aval) *.8): ]

    #vetorização e escolhendo o classificador linear
    pipeline = Pipeline([
      ('counts', CountVectorizer()),
      ('classifier', SVC(kernel='linear',probability=True,random_state=1))
    ])
    pipeline.fit(x_treino, y_treino)
    #score linear
    score = pipeline.score(x_test, y_test)
    totalScore += score
    i += 1
    writeResult(score, allBalanced, balancedFile, notBalancedFile)
    allBalanced = False
    boole = False
average = totalScore / 10
balancedFile.close()
notBalancedFile.close()
print(average)
